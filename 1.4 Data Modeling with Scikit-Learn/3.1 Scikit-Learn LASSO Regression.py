import numpy as np

from sklearn import linear_model

data = np.array([[5.1, 3.5, 1.4, 0.2],
                 [4.9, 3., 1.4, 0.2],
                 [4.7, 3.2, 1.3, 0.2],
                 [4.6, 3.1, 1.5, 0.2],
                 [5., 3.6, 1.4, 0.2],
                 [5.4, 3.9, 1.7, 0.4],
                 [4.6, 3.4, 1.4, 0.3],
                 [5., 3.4, 1.5, 0.2],
                 [4.4, 2.9, 1.4, 0.2],
                 [4.9, 3.1, 1.5, 0.1],
                 [5.4, 3.7, 1.5, 0.2],
                 [4.8, 3.4, 1.6, 0.2],
                 [4.8, 3., 1.4, 0.1],
                 [4.3, 3., 1.1, 0.1],
                 [5.8, 4., 1.2, 0.2],
                 [5.7, 4.4, 1.5, 0.4],
                 [5.4, 3.9, 1.3, 0.4],
                 [5.1, 3.5, 1.4, 0.3],
                 [5.7, 3.8, 1.7, 0.3],
                 [5.1, 3.8, 1.5, 0.3],
                 [5.4, 3.4, 1.7, 0.2],
                 [5.1, 3.7, 1.5, 0.4],
                 [4.6, 3.6, 1., 0.2],
                 [5.1, 3.3, 1.7, 0.5],
                 [4.8, 3.4, 1.9, 0.2],
                 [5., 3., 1.6, 0.2],
                 [5., 3.4, 1.6, 0.4],
                 [5.2, 3.5, 1.5, 0.2],
                 [5.2, 3.4, 1.4, 0.2],
                 [4.7, 3.2, 1.6, 0.2],
                 [4.8, 3.1, 1.6, 0.2],
                 [5.4, 3.4, 1.5, 0.4],
                 [5.2, 4.1, 1.5, 0.1],
                 [5.5, 4.2, 1.4, 0.2],
                 [4.9, 3.1, 1.5, 0.1],
                 [5., 3.2, 1.2, 0.2],
                 [5.5, 3.5, 1.3, 0.2],
                 [4.9, 3.1, 1.5, 0.1],
                 [4.4, 3., 1.3, 0.2],
                 [5.1, 3.4, 1.5, 0.2],
                 [5., 3.5, 1.3, 0.3],
                 [4.5, 2.3, 1.3, 0.3],
                 [4.4, 3.2, 1.3, 0.2],
                 [5., 3.5, 1.6, 0.6],
                 [5.1, 3.8, 1.9, 0.4],
                 [4.8, 3., 1.4, 0.3],
                 [5.1, 3.8, 1.6, 0.2],
                 [4.6, 3.2, 1.4, 0.2],
                 [5.3, 3.7, 1.5, 0.2],
                 [5., 3.3, 1.4, 0.2],
                 [7., 3.2, 4.7, 1.4],
                 [6.4, 3.2, 4.5, 1.5],
                 [6.9, 3.1, 4.9, 1.5],
                 [5.5, 2.3, 4., 1.3],
                 [6.5, 2.8, 4.6, 1.5],
                 [5.7, 2.8, 4.5, 1.3],
                 [6.3, 3.3, 4.7, 1.6],
                 [4.9, 2.4, 3.3, 1.],
                 [6.6, 2.9, 4.6, 1.3],
                 [5.2, 2.7, 3.9, 1.4],
                 [5., 2., 3.5, 1.],
                 [5.9, 3., 4.2, 1.5],
                 [6., 2.2, 4., 1.],
                 [6.1, 2.9, 4.7, 1.4],
                 [5.6, 2.9, 3.6, 1.3],
                 [6.7, 3.1, 4.4, 1.4],
                 [5.6, 3., 4.5, 1.5],
                 [5.8, 2.7, 4.1, 1.],
                 [6.2, 2.2, 4.5, 1.5],
                 [5.6, 2.5, 3.9, 1.1],
                 [5.9, 3.2, 4.8, 1.8],
                 [6.1, 2.8, 4., 1.3],
                 [6.3, 2.5, 4.9, 1.5],
                 [6.1, 2.8, 4.7, 1.2],
                 [6.4, 2.9, 4.3, 1.3],
                 [6.6, 3., 4.4, 1.4],
                 [6.8, 2.8, 4.8, 1.4],
                 [6.7, 3., 5., 1.7],
                 [6., 2.9, 4.5, 1.5],
                 [5.7, 2.6, 3.5, 1.],
                 [5.5, 2.4, 3.8, 1.1],
                 [5.5, 2.4, 3.7, 1.],
                 [5.8, 2.7, 3.9, 1.2],
                 [6., 2.7, 5.1, 1.6],
                 [5.4, 3., 4.5, 1.5],
                 [6., 3.4, 4.5, 1.6],
                 [6.7, 3.1, 4.7, 1.5],
                 [6.3, 2.3, 4.4, 1.3],
                 [5.6, 3., 4.1, 1.3],
                 [5.5, 2.5, 4., 1.3],
                 [5.5, 2.6, 4.4, 1.2],
                 [6.1, 3., 4.6, 1.4],
                 [5.8, 2.6, 4., 1.2],
                 [5., 2.3, 3.3, 1.],
                 [5.6, 2.7, 4.2, 1.3],
                 [5.7, 3., 4.2, 1.2],
                 [5.7, 2.9, 4.2, 1.3],
                 [6.2, 2.9, 4.3, 1.3],
                 [5.1, 2.5, 3., 1.1],
                 [5.7, 2.8, 4.1, 1.3],
                 [6.3, 3.3, 6., 2.5],
                 [5.8, 2.7, 5.1, 1.9],
                 [7.1, 3., 5.9, 2.1],
                 [6.3, 2.9, 5.6, 1.8],
                 [6.5, 3., 5.8, 2.2],
                 [7.6, 3., 6.6, 2.1],
                 [4.9, 2.5, 4.5, 1.7],
                 [7.3, 2.9, 6.3, 1.8],
                 [6.7, 2.5, 5.8, 1.8],
                 [7.2, 3.6, 6.1, 2.5],
                 [6.5, 3.2, 5.1, 2.],
                 [6.4, 2.7, 5.3, 1.9],
                 [6.8, 3., 5.5, 2.1],
                 [5.7, 2.5, 5., 2.],
                 [5.8, 2.8, 5.1, 2.4],
                 [6.4, 3.2, 5.3, 2.3],
                 [6.5, 3., 5.5, 1.8],
                 [7.7, 3.8, 6.7, 2.2],
                 [7.7, 2.6, 6.9, 2.3],
                 [6., 2.2, 5., 1.5],
                 [6.9, 3.2, 5.7, 2.3],
                 [5.6, 2.8, 4.9, 2.],
                 [7.7, 2.8, 6.7, 2.],
                 [6.3, 2.7, 4.9, 1.8],
                 [6.7, 3.3, 5.7, 2.1],
                 [7.2, 3.2, 6., 1.8],
                 [6.2, 2.8, 4.8, 1.8],
                 [6.1, 3., 4.9, 1.8],
                 [6.4, 2.8, 5.6, 2.1],
                 [7.2, 3., 5.8, 1.6],
                 [7.4, 2.8, 6.1, 1.9],
                 [7.9, 3.8, 6.4, 2.],
                 [6.4, 2.8, 5.6, 2.2],
                 [6.3, 2.8, 5.1, 1.5],
                 [6.1, 2.6, 5.6, 1.4],
                 [7.7, 3., 6.1, 2.3],
                 [6.3, 3.4, 5.6, 2.4],
                 [6.4, 3.1, 5.5, 1.8],
                 [6., 3., 4.8, 1.8],
                 [6.9, 3.1, 5.4, 2.1],
                 [6.7, 3.1, 5.6, 2.4],
                 [6.9, 3.1, 5.1, 2.3],
                 [5.8, 2.7, 5.1, 1.9],
                 [6.8, 3.2, 5.9, 2.3],
                 [6.7, 3.3, 5.7, 2.5],
                 [6.7, 3., 5.2, 2.3],
                 [6.3, 2.5, 5., 1.9],
                 [6.5, 3., 5.2, 2.],
                 [6.2, 3.4, 5.4, 2.3],
                 [5.9, 3., 5.1, 1.8]])

labels = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                   0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])

# Sparse Regularization
print("Sparse Regularization")

# While ridge regularization uses an L2 norm penalty term, another
# regularization method called LASSO uses an L1 norm for the weights
# penalty term. Specifically, LASSO regularization will find the optimal
# weights to minimize the following quantity:

# \alpha ||w||_1 + \sum_{i = 1}^n (\mathbf{x}_i \cdot w - y_i)^2α∣∣w∣∣

# where ||w||1 represents the L1 norm of the weights.

# LASSO regularization tends to prefer linear models with fewer parameter
# values. This means that it will likely zero-out some of the weight
# coefficients. This reduces the number of features that the model is
# actually dependent on (since some of the coefficients will now be 0),
# which can be beneficial when some features are completely irrelevant or
# duplicates of other features.

# In scikit-learn, we implement LASSO using the Lasso object, which is part
# of the linear_model module. Like the Ridge object, it takes in the model's
# α value with the alpha keyword argument (default is 1.0).

# The code below demonstrates how to use the Lasso object on a dataset with
# 150 observations and 4 features.

print('Data shape: {}\n'.format(data.shape))
print('Labels shape: {}\n'.format(labels.shape))

reg = linear_model.Lasso(alpha=0.1)
reg.fit(data, labels)
print('Coefficients: {}\n'.format(repr(reg.coef_)))
print('Intercept: {}\n'.format(reg.intercept_))
print('R2: {}\n'.format(reg.score(data, labels)))

# In the example above, note that a majority of the weights are 0, due to
# the LASSO sparse weight preference.

# There is also a cross-validated version in the form of the LassoCV object,
# which works in essentially the same way as the RidgeCV object.
